CREATE OR REPLACE TYPE V_BINARY_DOUBLE IS
    TABLE OF BINARY_DOUBLE
/--split
CREATE OR REPLACE TYPE V_VARCHAR2 IS 
    TABLE OF VARCHAR2(150)
/--split
CREATE TABLE T_COLLECTION (
    ID_COLLECTION    NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NAME_COLLECTION  VARCHAR2(100),
    DESCRIPTION      CLOB,
    SEARCH_METHOD_ID NUMBER,
    VECTOR_SIZE      NUMBER,
    CREATION_DATE    DATE DEFAULT SYSDATE
)
/--split
CREATE TABLE T_DATA_VECTOR (
    ID_DATA_VECTOR NUMBER GENERATED ALWAYS AS IDENTITY,
    COLLECTION_ID  NUMBER,
    METADATA       CLOB CHECK ( METADATA IS JSON ),
    TAGS           V_VARCHAR2,
    DESCRIPTION    CLOB,
    VECTOR         V_BINARY_DOUBLE,
    CREATION_DATE  DATE DEFAULT SYSDATE,
    CONSTRAINT FK_ID_COLLECTION FOREIGN KEY ( COLLECTION_ID )
        REFERENCES T_COLLECTION ( ID_COLLECTION )
)
NESTED TABLE VECTOR STORE AS NESTED_VECTOR_TABLE
NESTED TABLE TAGS STORE AS NESTED_TAGS_TABLE
/--split
CREATE INDEX IDX_COLLECTION ON T_DATA_VECTOR(COLLECTION_ID)
/--split
CREATE TABLE T_SIMILITARY_METHODS(
    id_method NUMBER GENERATED ALWAYS AS IDENTITY,
    name_method VARCHAR2(100),
    DESCRIPTION VARCHAR2(4000),
    SORT_ORDER VARCHAR2(10)
)
/--split
INSERT INTO T_SIMILITARY_METHODS (NAME_METHOD, DESCRIPTION) VALUES ('COSINES_SIMILITARY','Realiza comparacion en cosenos directores')
/--split
INSERT INTO T_SIMILITARY_METHODS (NAME_METHOD, DESCRIPTION) VALUES ('EUCLIDIAN_DISTANCE','Realiza comparacion a traves de distancia euclideana')
/--split
INSERT INTO T_SIMILITARY_METHODS (NAME_METHOD, DESCRIPTION) VALUES ('DOT_PRODUCT','Realiza comparacion de tipo producto punto')
